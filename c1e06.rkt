#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 72 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 5 #"Hack\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 5 #"Hack\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0 9 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
0 9 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0 -1
-1           0 1116 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 121
(
 #"#reader(lib \"htdp-beginner-reader.ss\" \"lang\")((modname c1e06) (r"
 #"ead-case-sensitive #t) (teachpacks ((lib \"image.rkt\" \"tea"
) 0 0 4 3 292
(
 #"chpack\" \"2htdp\") (lib \"universe.rkt\" \"teachpack\" \"2htdp\") ("
 #"lib \"batch-io.rkt\" \"teachpack\" \"2htdp\"))) (htdp-settings #(#t "
 #"constructor repeating-decimal #f #t none #f ((lib \"image.rkt\" \"te"
 #"achpack\" \"2htdp\") (lib \"universe.rkt\" \"teachpack\" \"2htdp\") "
 #"(lib \"batch-io.rkt\" \"teachpack\" \"2htdp\")) #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 18 #"; Automating tests"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Number -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; converts Fahrenheit temperatures to Celsius"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; given 32, expect 0"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; given 212, expect 100"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; given -40, expect -40"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"f2c"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"5/9"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 21 3 2 #"32"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 3 #"f2c"
0 0 24 3 1 #" "
0 0 21 3 3 #"-40"
0 0 24 3 2 #") "
0 0 21 3 3 #"-40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 3 #"f2c"
0 0 24 3 1 #" "
0 0 21 3 2 #"32"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 3 #"f2c"
0 0 24 3 1 #" "
0 0 21 3 3 #"212"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; these can be combined into the formulation of a function:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Number -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; converts Fahrenheit temperatures into Celsius"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"f2c.2"
0 0 24 3 1 #" "
0 0 21 3 3 #"-40"
0 0 24 3 2 #") "
0 0 21 3 3 #"-40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"f2c.2"
0 0 24 3 1 #" "
0 0 21 3 2 #"32"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"f2c.2"
0 0 24 3 1 #" "
0 0 21 3 3 #"212"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"f2c.2"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"5/9"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 21 3 2 #"32"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; Systematic design of World programs"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; WorldState: a data definition for a class of data that"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; represents the state of the world (cw)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; render: WorldState -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; when needed, big-bang obtains the image of the current"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; state of the world by evaluating (render cw)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; clock-tick-handler: WorldState -> WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; for each tick of the clock, big-bang obtains the next"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; state of the world from (clock-tick-handler cw)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; key-stroke-handler: WorldState String -> WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; for each key stroke, big-bang obtains the next state"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; from (key-stroke-handler cw ke) where ke is the key"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; stroke to obtain the new world state"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; mouse-event-handler:"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";   WorldState Number Number Number String -> WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; for each mouse gesture, big-bang obtains the next state"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; from (mouse-event-handler cw x y me) where x and y are"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; the coordinates of the event and me is its description"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; end?: WorldState -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; when needed, big-bang evaluates (end? cw) to determine"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; whether the program should stop"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Sample Problem:"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Design a program that moves a car from left to right on"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; the world canvas, three pixels per clock tick."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Introducing physical constants"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"WIDTH-OF-WORLD"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"HEIGHT-OF-WORLD"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"CAR-SPEED"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"WHEEL-DISTANCE"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"Y-CAR"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"underlay/xy"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"brown\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"TREE-X"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 14 #"WIDTH-OF-WORLD"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"TREE-Y"
0 0 24 3 1 #" "
0 0 21 3 2 #"35"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"BACKGROUND"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 4 #"tree"
0 0 24 3 1 #" "
0 0 14 3 6 #"TREE-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"TREE-Y"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 14 #"WIDTH-OF-WORLD"
0 0 24 3 1 #" "
0 0 14 3 15 #"HEIGHT-OF-WORLD"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Introducing graphical constants"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"WHEEL"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"SPACE"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"rectangle"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.0"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; the BSL syntax allows for incomplete expressions using"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; this template format (but still throws a warning), so they"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; can be written down and then filled in later."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"BOTH-WHEELS"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"beside"
0 0 24 3 1 #" "
0 0 14 3 5 #"WHEEL"
0 0 24 3 1 #" "
0 0 14 3 5 #"SPACE"
0 0 24 3 1 #" "
0 0 14 3 5 #"WHEEL"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"FRAME"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"beside"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"above"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"rectangle"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 11 #"BOTH-WHEELS"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 19 3 7 #"\"solid\""
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 19 3 7 #"\"white\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"rectangle"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 11 #"BOTH-WHEELS"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 19 3 7 #"\"solid\""
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"rectangle"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 11 #"BOTH-WHEELS"
0 0 24 3 2 #") "
0 0 21 3 3 #"2/3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 7 #"\"solid\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"above"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"rectangle"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 11 #"BOTH-WHEELS"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 19 3 7 #"\"solid\""
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 19 3 7 #"\"white\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"rectangle"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 11 #"BOTH-WHEELS"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 19 3 7 #"\"solid\""
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 19 3 5 #"\"red\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 11 #"BOTH-WHEELS"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 5 #"FRAME"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"image-height"
0 0 24 3 1 #" "
0 0 14 3 5 #"FRAME"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"above"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 5 #"FRAME"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"rectangle"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 5 #"FRAME"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 19 3 7 #"\"solid\""
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 19 3 7 #"\"white\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; ^ Exercise 39: single point of control for CAR"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Modeling change over time"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; A WorldState is a Number."
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; interpretation the number of pixels between the left"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; border of the scene and the car"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; alternatively:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; A WorldState is a Number."
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; interpretation: the number of times the clock has ticked"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; since the beginning of the program"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; render: WorldState -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; translating from the world state to an image"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; interpretation: places the image of the car ws pixels"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; from the left margin of the BACKGROUND image"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; given 50, expect: "
0 6           4 17 3582
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 200 0) #(struct:p"
 #"oint 200 40) #(struct:point 0 40)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 30 55/4 #(struct:crop (#(struct:point 0 0)"
 #" #(struct:point 40 0) #(struct:point 40 45/2) #(struct:point 0 45/2)"
 #") #(struct:translate 0 0 #(struct:overlay #(struct:translate 5 13 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:translate 5 5 #(struct:ellipse 10 10 0 255 \"blac"
 #"k\"))) #(struct:translate 10 5 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0"
 #" 0 0 0 0)) 255 \"white\"))))) #(struct:translate 20 0 #(struct:trans"
 #"late 5 5 #(struct:ellipse 10 10 0 255 \"black\"))))) #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10"
 #" 0 0 0) #(struct:pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point"
 #" 0 0 0 15/2 0 0)) 255 \"white\"))) #(struct:translate 0 15/2 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10"
 #" 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"red\"))))) #(struct"
 #":translate 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct"
 #":pulled-point 0 0 20 35/2 0 0) #(struct:pulled-point 0 0 0 35/2 0 0)"
 #") 255 \"red\"))))) #(struct:translate 30 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:"
 #"pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point 0 0 0 15/2 0 0))"
 #" 255 \"white\"))) #(struct:translate 0 15/2 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pu"
 #"lled-point 0 0 0 10 0 0)) 255 \"red\"))))))) #(struct:translate 0 35"
 #"/2 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point"
 #" 0 0 40 5 0 0) #(struct:pulled-point 0 0 0 5 0 0)) 255 \"white\"))))"
 #"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(st"
 #"ruct:point 200 0) #(struct:point 200 40) #(struct:point 0 40)) #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 90 35/2 #(stru"
 #"ct:overlay #(struct:translate 9 15 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 2 0 0 0) #(struct:pulled-point 0 0 2 20 0 0) #(struct:pulled-point "
 #"0 0 0 20 0 0)) 255 \"brown\"))) #(struct:translate 0 0 #(struct:tran"
 #"slate 10 10 #(struct:ellipse 20 20 0 255 \"green\"))))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 200 0) "
 #"#(struct:point 200 40) #(struct:point 0 40)) #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pull"
 #"ed-point 0 0 0 40 0 0)) outline #(struct:pen \"black\" 2 solid round"
 #" round)))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 40 0 0)) 255 \"white\")))))))))))))) #(struct:bb 200 40 40)"
 #" #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #"; given 100, expect: "
0 6           4 17 3582
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 200 0) #(struct:p"
 #"oint 200 40) #(struct:point 0 40)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 80 55/4 #(struct:crop (#(struct:point 0 0)"
 #" #(struct:point 40 0) #(struct:point 40 45/2) #(struct:point 0 45/2)"
 #") #(struct:translate 0 0 #(struct:overlay #(struct:translate 5 13 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:translate 5 5 #(struct:ellipse 10 10 0 255 \"blac"
 #"k\"))) #(struct:translate 10 5 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0"
 #" 0 0 0 0)) 255 \"white\"))))) #(struct:translate 20 0 #(struct:trans"
 #"late 5 5 #(struct:ellipse 10 10 0 255 \"black\"))))) #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10"
 #" 0 0 0) #(struct:pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point"
 #" 0 0 0 15/2 0 0)) 255 \"white\"))) #(struct:translate 0 15/2 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10"
 #" 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"red\"))))) #(struct"
 #":translate 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct"
 #":pulled-point 0 0 20 35/2 0 0) #(struct:pulled-point 0 0 0 35/2 0 0)"
 #") 255 \"red\"))))) #(struct:translate 30 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:"
 #"pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point 0 0 0 15/2 0 0))"
 #" 255 \"white\"))) #(struct:translate 0 15/2 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pu"
 #"lled-point 0 0 0 10 0 0)) 255 \"red\"))))))) #(struct:translate 0 35"
 #"/2 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point"
 #" 0 0 40 5 0 0) #(struct:pulled-point 0 0 0 5 0 0)) 255 \"white\"))))"
 #"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(st"
 #"ruct:point 200 0) #(struct:point 200 40) #(struct:point 0 40)) #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 90 35/2 #(stru"
 #"ct:overlay #(struct:translate 9 15 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 2 0 0 0) #(struct:pulled-point 0 0 2 20 0 0) #(struct:pulled-point "
 #"0 0 0 20 0 0)) 255 \"brown\"))) #(struct:translate 0 0 #(struct:tran"
 #"slate 10 10 #(struct:ellipse 20 20 0 255 \"green\"))))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 200 0) "
 #"#(struct:point 200 40) #(struct:point 0 40)) #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pull"
 #"ed-point 0 0 0 40 0 0)) outline #(struct:pen \"black\" 2 solid round"
 #" round)))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 40 0 0)) 255 \"white\")))))))))))))) #(struct:bb 200 40 40)"
 #" #f)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #" "
0 0 14 3 5 #"Y-CAR"
0 0 24 3 1 #" "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #") "
0 6           4 21 3582
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 200 0) #(struct:p"
 #"oint 200 40) #(struct:point 0 40)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 30 55/4 #(struct:crop (#(struct:point 0 0)"
 #" #(struct:point 40 0) #(struct:point 40 45/2) #(struct:point 0 45/2)"
 #") #(struct:translate 0 0 #(struct:overlay #(struct:translate 5 13 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:translate 5 5 #(struct:ellipse 10 10 0 255 \"blac"
 #"k\"))) #(struct:translate 10 5 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0"
 #" 0 0 0 0)) 255 \"white\"))))) #(struct:translate 20 0 #(struct:trans"
 #"late 5 5 #(struct:ellipse 10 10 0 255 \"black\"))))) #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10"
 #" 0 0 0) #(struct:pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point"
 #" 0 0 0 15/2 0 0)) 255 \"white\"))) #(struct:translate 0 15/2 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10"
 #" 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"red\"))))) #(struct"
 #":translate 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct"
 #":pulled-point 0 0 20 35/2 0 0) #(struct:pulled-point 0 0 0 35/2 0 0)"
 #") 255 \"red\"))))) #(struct:translate 30 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:"
 #"pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point 0 0 0 15/2 0 0))"
 #" 255 \"white\"))) #(struct:translate 0 15/2 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pu"
 #"lled-point 0 0 0 10 0 0)) 255 \"red\"))))))) #(struct:translate 0 35"
 #"/2 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point"
 #" 0 0 40 5 0 0) #(struct:pulled-point 0 0 0 5 0 0)) 255 \"white\"))))"
 #"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(st"
 #"ruct:point 200 0) #(struct:point 200 40) #(struct:point 0 40)) #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 90 35/2 #(stru"
 #"ct:overlay #(struct:translate 9 15 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 2 0 0 0) #(struct:pulled-point 0 0 2 20 0 0) #(struct:pulled-point "
 #"0 0 0 20 0 0)) 255 \"brown\"))) #(struct:translate 0 0 #(struct:tran"
 #"slate 10 10 #(struct:ellipse 20 20 0 255 \"green\"))))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 200 0) "
 #"#(struct:point 200 40) #(struct:point 0 40)) #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pull"
 #"ed-point 0 0 0 40 0 0)) outline #(struct:pen \"black\" 2 solid round"
 #" round)))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 40 0 0)) 255 \"white\")))))))))))))) #(struct:bb 200 40 40)"
 #" #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"render"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 6           4 21 3582
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 200 0) #(struct:p"
 #"oint 200 40) #(struct:point 0 40)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 80 55/4 #(struct:crop (#(struct:point 0 0)"
 #" #(struct:point 40 0) #(struct:point 40 45/2) #(struct:point 0 45/2)"
 #") #(struct:translate 0 0 #(struct:overlay #(struct:translate 5 13 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:translate 5 5 #(struct:ellipse 10 10 0 255 \"blac"
 #"k\"))) #(struct:translate 10 5 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0"
 #" 0 0 0 0)) 255 \"white\"))))) #(struct:translate 20 0 #(struct:trans"
 #"late 5 5 #(struct:ellipse 10 10 0 255 \"black\"))))) #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10"
 #" 0 0 0) #(struct:pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point"
 #" 0 0 0 15/2 0 0)) 255 \"white\"))) #(struct:translate 0 15/2 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10"
 #" 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"red\"))))) #(struct"
 #":translate 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct"
 #":pulled-point 0 0 20 35/2 0 0) #(struct:pulled-point 0 0 0 35/2 0 0)"
 #") 255 \"red\"))))) #(struct:translate 30 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:"
 #"pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point 0 0 0 15/2 0 0))"
 #" 255 \"white\"))) #(struct:translate 0 15/2 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pu"
 #"lled-point 0 0 0 10 0 0)) 255 \"red\"))))))) #(struct:translate 0 35"
 #"/2 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point"
 #" 0 0 40 5 0 0) #(struct:pulled-point 0 0 0 5 0 0)) 255 \"white\"))))"
 #"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(st"
 #"ruct:point 200 0) #(struct:point 200 40) #(struct:point 0 40)) #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 90 35/2 #(stru"
 #"ct:overlay #(struct:translate 9 15 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 2 0 0 0) #(struct:pulled-point 0 0 2 20 0 0) #(struct:pulled-point "
 #"0 0 0 20 0 0)) 255 \"brown\"))) #(struct:translate 0 0 #(struct:tran"
 #"slate 10 10 #(struct:ellipse 20 20 0 255 \"green\"))))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 200 0) "
 #"#(struct:point 200 40) #(struct:point 0 40)) #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pull"
 #"ed-point 0 0 0 40 0 0)) outline #(struct:pen \"black\" 2 solid round"
 #" round)))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 40 0 0)) 255 \"white\")))))))))))))) #(struct:bb 200 40 40)"
 #" #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; passes all checks"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; clock-tick-handler: WorldState -> WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; adds 3 to x to move the car right"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; given: 20, expect 23"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; given: 78, expect 81"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"tock"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"tock"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #") "
0 0 21 3 2 #"23"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"tock"
0 0 24 3 1 #" "
0 0 21 3 2 #"78"
0 0 24 3 2 #") "
0 0 21 3 2 #"81"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; passed all checks (exercise 40)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; key-stroke-handler"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; mouse-event-handlers"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; handlers to update the state of the world based on events"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; end?"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; function to terminate the program"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; when the car is fully off screen"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; interpretation: when (> ws"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";                       (+ WIDTH-OF-WORLD"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";                         (image-width CAR)))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 14 #"WIDTH-OF-WORLD"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; WorldState -> WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; launches the program from some initial state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"main"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"big-bang"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 4 #"tock"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 6 #"render"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 9 #"stop-when"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; Exercise 41 - passes all checks (modified to add tree)"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; Exercise 42 - modified to subtract car width from ws"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; An AnimationState is a number."
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; Interpretation: the number of clock ticks since the"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; animation started"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; render.v2: AnimationState Number -> image"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; translates from a car speed and an AnimationState"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; to an image of the car on screen."
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; given 10 and 3, expect "
0 6           4 17 3582
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 200 0) #(struct:p"
 #"oint 200 40) #(struct:point 0 40)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 10 55/4 #(struct:crop (#(struct:point 0 0)"
 #" #(struct:point 40 0) #(struct:point 40 45/2) #(struct:point 0 45/2)"
 #") #(struct:translate 0 0 #(struct:overlay #(struct:translate 5 13 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:translate 5 5 #(struct:ellipse 10 10 0 255 \"blac"
 #"k\"))) #(struct:translate 10 5 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0"
 #" 0 0 0 0)) 255 \"white\"))))) #(struct:translate 20 0 #(struct:trans"
 #"late 5 5 #(struct:ellipse 10 10 0 255 \"black\"))))) #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10"
 #" 0 0 0) #(struct:pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point"
 #" 0 0 0 15/2 0 0)) 255 \"white\"))) #(struct:translate 0 15/2 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10"
 #" 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"red\"))))) #(struct"
 #":translate 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct"
 #":pulled-point 0 0 20 35/2 0 0) #(struct:pulled-point 0 0 0 35/2 0 0)"
 #") 255 \"red\"))))) #(struct:translate 30 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:"
 #"pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point 0 0 0 15/2 0 0))"
 #" 255 \"white\"))) #(struct:translate 0 15/2 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pu"
 #"lled-point 0 0 0 10 0 0)) 255 \"red\"))))))) #(struct:translate 0 35"
 #"/2 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point"
 #" 0 0 40 5 0 0) #(struct:pulled-point 0 0 0 5 0 0)) 255 \"white\"))))"
 #"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(st"
 #"ruct:point 200 0) #(struct:point 200 40) #(struct:point 0 40)) #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 90 35/2 #(stru"
 #"ct:overlay #(struct:translate 9 15 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 2 0 0 0) #(struct:pulled-point 0 0 2 20 0 0) #(struct:pulled-point "
 #"0 0 0 20 0 0)) 255 \"brown\"))) #(struct:translate 0 0 #(struct:tran"
 #"slate 10 10 #(struct:ellipse 20 20 0 255 \"green\"))))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 200 0) "
 #"#(struct:point 200 40) #(struct:point 0 40)) #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pull"
 #"ed-point 0 0 0 40 0 0)) outline #(struct:pen \"black\" 2 solid round"
 #" round)))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 40 0 0)) 255 \"white\")))))))))))))) #(struct:bb 200 40 40)"
 #" #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #"; given 20 and 5, expect "
0 6           4 17 3582
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 200 0) #(struct:p"
 #"oint 200 40) #(struct:point 0 40)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 80 55/4 #(struct:crop (#(struct:point 0 0)"
 #" #(struct:point 40 0) #(struct:point 40 45/2) #(struct:point 0 45/2)"
 #") #(struct:translate 0 0 #(struct:overlay #(struct:translate 5 13 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:translate 5 5 #(struct:ellipse 10 10 0 255 \"blac"
 #"k\"))) #(struct:translate 10 5 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0"
 #" 0 0 0 0)) 255 \"white\"))))) #(struct:translate 20 0 #(struct:trans"
 #"late 5 5 #(struct:ellipse 10 10 0 255 \"black\"))))) #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10"
 #" 0 0 0) #(struct:pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point"
 #" 0 0 0 15/2 0 0)) 255 \"white\"))) #(struct:translate 0 15/2 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10"
 #" 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"red\"))))) #(struct"
 #":translate 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct"
 #":pulled-point 0 0 20 35/2 0 0) #(struct:pulled-point 0 0 0 35/2 0 0)"
 #") 255 \"red\"))))) #(struct:translate 30 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:"
 #"pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point 0 0 0 15/2 0 0))"
 #" 255 \"white\"))) #(struct:translate 0 15/2 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pu"
 #"lled-point 0 0 0 10 0 0)) 255 \"red\"))))))) #(struct:translate 0 35"
 #"/2 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point"
 #" 0 0 40 5 0 0) #(struct:pulled-point 0 0 0 5 0 0)) 255 \"white\"))))"
 #"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(st"
 #"ruct:point 200 0) #(struct:point 200 40) #(struct:point 0 40)) #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 90 35/2 #(stru"
 #"ct:overlay #(struct:translate 9 15 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 2 0 0 0) #(struct:pulled-point 0 0 2 20 0 0) #(struct:pulled-point "
 #"0 0 0 20 0 0)) 255 \"brown\"))) #(struct:translate 0 0 #(struct:tran"
 #"slate 10 10 #(struct:ellipse 20 20 0 255 \"green\"))))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 200 0) "
 #"#(struct:point 200 40) #(struct:point 0 40)) #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pull"
 #"ed-point 0 0 0 40 0 0)) outline #(struct:pen \"black\" 2 solid round"
 #" round)))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 40 0 0)) 255 \"white\")))))))))))))) #(struct:bb 200 40 40)"
 #" #f)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"render.v2"
0 0 24 3 1 #" "
0 0 14 3 2 #"as"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 3 #"CAR"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"as"
0 0 24 3 1 #" "
0 0 14 3 9 #"CAR-SPEED"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"Y-CAR"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sin"
0 0 24 3 1 #" "
0 0 14 3 2 #"as"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 9 #"render.v2"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 2 #") "
0 6           4 17 3582
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 200 0) #(struct:p"
 #"oint 200 40) #(struct:point 0 40)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 10 55/4 #(struct:crop (#(struct:point 0 0)"
 #" #(struct:point 40 0) #(struct:point 40 45/2) #(struct:point 0 45/2)"
 #") #(struct:translate 0 0 #(struct:overlay #(struct:translate 5 13 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:translate 5 5 #(struct:ellipse 10 10 0 255 \"blac"
 #"k\"))) #(struct:translate 10 5 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0"
 #" 0 0 0 0)) 255 \"white\"))))) #(struct:translate 20 0 #(struct:trans"
 #"late 5 5 #(struct:ellipse 10 10 0 255 \"black\"))))) #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10"
 #" 0 0 0) #(struct:pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point"
 #" 0 0 0 15/2 0 0)) 255 \"white\"))) #(struct:translate 0 15/2 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10"
 #" 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"red\"))))) #(struct"
 #":translate 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct"
 #":pulled-point 0 0 20 35/2 0 0) #(struct:pulled-point 0 0 0 35/2 0 0)"
 #") 255 \"red\"))))) #(struct:translate 30 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:"
 #"pulled-point 0 0 10 15/2 0 0) #(struct:pulled-point 0 0 0 15/2 0 0))"
 #" 255 \"white\"))) #(struct:translate 0 15/2 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pu"
 #"lled-point 0 0 0 10 0 0)) 255 \"red\"))))))) #(struct:translate 0 35"
 #"/2 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point"
 #" 0 0 40 5 0 0) #(struct:pulled-point 0 0 0 5 0 0)) 255 \"white\"))))"
 #"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(st"
 #"ruct:point 200 0) #(struct:point 200 40) #(struct:point 0 40)) #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 90 35/2 #(stru"
 #"ct:overlay #(struct:translate 9 15 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 2 0 0 0) #(struct:pulled-point 0 0 2 20 0 0) #(struct:pulled-point "
 #"0 0 0 20 0 0)) 255 \"brown\"))) #(struct:translate 0 0 #(struct:tran"
 #"slate 10 10 #(struct:ellipse 20 20 0 255 \"green\"))))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 200 0) "
 #"#(struct:point 200 40) #(struct:point 0 40)) #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pull"
 #"ed-point 0 0 0 40 0 0)) outline #(struct:pen \"black\" 2 solid round"
 #" round)))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"200 0 0 0) #(struct:pulled-point 0 0 200 40 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 40 0 0)) 255 \"white\")))))))))))))) #(struct:bb 200 40 40)"
 #" #f)"
) 0 0 17 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; passes all checks"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Tock.v2: AnimationState -> AnimationState"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; interpretation: increments the animationState by one tick"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; (per above interpretation)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Given 3, expect 4"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; Given 20, expect 21"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tock.v2"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";(check-expect (tock.v2 3) 4)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(check-expect (tock.v2 20) 21)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Main.v2 WorldState -> WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; Launches the program from some initial state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"main.v2"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"big-bang"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 7 #"tock.v2"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 9 #"render.v2"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"stop-when"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; Exercise 43: sin motion of the car"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; WorldState Number Number String -> WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; place the car at the x-coordinate"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; if the given me is \"button-down\""
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; given: 21 10 20 \"enter\""
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; wanted: 21"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; given 42 10 20 \"button-down\""
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; wanted: 10"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; given 42 10 20 \"move\""
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; wanted: 42"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"hyper"
0 0 24 3 1 #" "
0 0 14 3 17 #"x-position-of-car"
0 0 24 3 1 #" "
0 0 14 3 7 #"x-mouse"
0 0 24 3 1 #" "
0 0 14 3 7 #"y-mouse"
0 0 24 3 1 #" "
0 0 14 3 2 #"me"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"button-down\""
0 0 24 3 1 #" "
0 0 14 3 2 #"me"
0 0 24 3 2 #") "
0 0 14 3 7 #"x-mouse"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 17 #"x-position-of-car"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"hyper"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"enter\""
0 0 24 3 2 #") "
0 0 21 3 2 #"21"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"hyper"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"button-down\""
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"hyper"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"move\""
0 0 24 3 2 #") "
0 0 21 3 2 #"42"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; Exercise 44: failed BSL tests"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"main.v3"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"big-bang"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 4 #"tock"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 8 #"on-mouse"
0 0 24 3 1 #" "
0 0 14 3 5 #"hyper"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 6 #"render"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; the addition of the hyper function is so simple"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; because this program strictly adheres to the"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; Model-View-Controller design pattern, separating"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; a program's internal state with the representation shown"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; to the user"
0           0
